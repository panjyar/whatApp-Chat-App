// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  avatarUrl String?
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sentMessages     Message[] @relation("MessageSender")
  threadsAsUserA   Thread[]  @relation("ThreadUserA")
  threadsAsUserB   Thread[]  @relation("ThreadUserB")
  ownedContacts    Contact[] @relation("ContactOwner")
  contactRelations Contact[] @relation("ContactUser")

  @@map("users")
}

model Thread {
  id            Int      @id @default(autoincrement())
  userAId       Int
  userBId       Int
  lastMessageId Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userA       User      @relation("ThreadUserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB       User      @relation("ThreadUserB", fields: [userBId], references: [id], onDelete: Cascade)
  lastMessage Message?  @relation("ThreadLastMessage", fields: [lastMessageId], references: [id])
  messages    Message[] @relation("ThreadMessages")

  // Indexes
  @@index([userAId])
  @@index([userBId])
  @@index([updatedAt])
  @@unique([userAId, userBId])
  @@map("threads")
}

model Message {
  id        Int           @id @default(autoincrement())
  threadId  Int
  senderId  Int
  content   String
  type      MessageType   @default(text)
  status    MessageStatus @default(sent)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  thread Thread @relation("ThreadMessages", fields: [threadId], references: [id], onDelete: Cascade)
  sender User   @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  // Reverse relation for lastMessage
  threadAsLast Thread[] @relation("ThreadLastMessage")

  // Indexes
  @@index([threadId])
  @@index([createdAt])
  @@index([senderId])
  @@map("messages")
}

model Contact {
  ownerId   Int
  contactId Int
  createdAt DateTime @default(now())

  // Relations
  owner   User @relation("ContactOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  contact User @relation("ContactUser", fields: [contactId], references: [id], onDelete: Cascade)

  @@id([ownerId, contactId])
  @@index([ownerId])
  @@map("contacts")
}

enum MessageType {
  text
  assistant
  system
}

enum MessageStatus {
  sent
  delivered
  read
}